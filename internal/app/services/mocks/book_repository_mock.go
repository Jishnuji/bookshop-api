// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"toptal/internal/app/domain"

	mock "github.com/stretchr/testify/mock"
)

// NewMockBookRepository creates a new instance of MockBookRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBookRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBookRepository {
	mock := &MockBookRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockBookRepository is an autogenerated mock type for the BookRepository type
type MockBookRepository struct {
	mock.Mock
}

type MockBookRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBookRepository) EXPECT() *MockBookRepository_Expecter {
	return &MockBookRepository_Expecter{mock: &_m.Mock}
}

// CreateBook provides a mock function for the type MockBookRepository
func (_mock *MockBookRepository) CreateBook(ctx context.Context, book domain.Book) (domain.Book, error) {
	ret := _mock.Called(ctx, book)

	if len(ret) == 0 {
		panic("no return value specified for CreateBook")
	}

	var r0 domain.Book
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.Book) (domain.Book, error)); ok {
		return returnFunc(ctx, book)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.Book) domain.Book); ok {
		r0 = returnFunc(ctx, book)
	} else {
		r0 = ret.Get(0).(domain.Book)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.Book) error); ok {
		r1 = returnFunc(ctx, book)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockBookRepository_CreateBook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBook'
type MockBookRepository_CreateBook_Call struct {
	*mock.Call
}

// CreateBook is a helper method to define mock.On call
//   - ctx context.Context
//   - book domain.Book
func (_e *MockBookRepository_Expecter) CreateBook(ctx interface{}, book interface{}) *MockBookRepository_CreateBook_Call {
	return &MockBookRepository_CreateBook_Call{Call: _e.mock.On("CreateBook", ctx, book)}
}

func (_c *MockBookRepository_CreateBook_Call) Run(run func(ctx context.Context, book domain.Book)) *MockBookRepository_CreateBook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.Book
		if args[1] != nil {
			arg1 = args[1].(domain.Book)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockBookRepository_CreateBook_Call) Return(book1 domain.Book, err error) *MockBookRepository_CreateBook_Call {
	_c.Call.Return(book1, err)
	return _c
}

func (_c *MockBookRepository_CreateBook_Call) RunAndReturn(run func(ctx context.Context, book domain.Book) (domain.Book, error)) *MockBookRepository_CreateBook_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteBook provides a mock function for the type MockBookRepository
func (_mock *MockBookRepository) DeleteBook(ctx context.Context, id int) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBook")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockBookRepository_DeleteBook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteBook'
type MockBookRepository_DeleteBook_Call struct {
	*mock.Call
}

// DeleteBook is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
func (_e *MockBookRepository_Expecter) DeleteBook(ctx interface{}, id interface{}) *MockBookRepository_DeleteBook_Call {
	return &MockBookRepository_DeleteBook_Call{Call: _e.mock.On("DeleteBook", ctx, id)}
}

func (_c *MockBookRepository_DeleteBook_Call) Run(run func(ctx context.Context, id int)) *MockBookRepository_DeleteBook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockBookRepository_DeleteBook_Call) Return(err error) *MockBookRepository_DeleteBook_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockBookRepository_DeleteBook_Call) RunAndReturn(run func(ctx context.Context, id int) error) *MockBookRepository_DeleteBook_Call {
	_c.Call.Return(run)
	return _c
}

// GetBook provides a mock function for the type MockBookRepository
func (_mock *MockBookRepository) GetBook(ctx context.Context, id int) (domain.Book, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetBook")
	}

	var r0 domain.Book
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) (domain.Book, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) domain.Book); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(domain.Book)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockBookRepository_GetBook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBook'
type MockBookRepository_GetBook_Call struct {
	*mock.Call
}

// GetBook is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
func (_e *MockBookRepository_Expecter) GetBook(ctx interface{}, id interface{}) *MockBookRepository_GetBook_Call {
	return &MockBookRepository_GetBook_Call{Call: _e.mock.On("GetBook", ctx, id)}
}

func (_c *MockBookRepository_GetBook_Call) Run(run func(ctx context.Context, id int)) *MockBookRepository_GetBook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockBookRepository_GetBook_Call) Return(book domain.Book, err error) *MockBookRepository_GetBook_Call {
	_c.Call.Return(book, err)
	return _c
}

func (_c *MockBookRepository_GetBook_Call) RunAndReturn(run func(ctx context.Context, id int) (domain.Book, error)) *MockBookRepository_GetBook_Call {
	_c.Call.Return(run)
	return _c
}

// GetBooks provides a mock function for the type MockBookRepository
func (_mock *MockBookRepository) GetBooks(ctx context.Context, categoryIDs []int, limit int, offset int) ([]domain.Book, error) {
	ret := _mock.Called(ctx, categoryIDs, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetBooks")
	}

	var r0 []domain.Book
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []int, int, int) ([]domain.Book, error)); ok {
		return returnFunc(ctx, categoryIDs, limit, offset)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []int, int, int) []domain.Book); ok {
		r0 = returnFunc(ctx, categoryIDs, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Book)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []int, int, int) error); ok {
		r1 = returnFunc(ctx, categoryIDs, limit, offset)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockBookRepository_GetBooks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBooks'
type MockBookRepository_GetBooks_Call struct {
	*mock.Call
}

// GetBooks is a helper method to define mock.On call
//   - ctx context.Context
//   - categoryIDs []int
//   - limit int
//   - offset int
func (_e *MockBookRepository_Expecter) GetBooks(ctx interface{}, categoryIDs interface{}, limit interface{}, offset interface{}) *MockBookRepository_GetBooks_Call {
	return &MockBookRepository_GetBooks_Call{Call: _e.mock.On("GetBooks", ctx, categoryIDs, limit, offset)}
}

func (_c *MockBookRepository_GetBooks_Call) Run(run func(ctx context.Context, categoryIDs []int, limit int, offset int)) *MockBookRepository_GetBooks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []int
		if args[1] != nil {
			arg1 = args[1].([]int)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		var arg3 int
		if args[3] != nil {
			arg3 = args[3].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockBookRepository_GetBooks_Call) Return(books []domain.Book, err error) *MockBookRepository_GetBooks_Call {
	_c.Call.Return(books, err)
	return _c
}

func (_c *MockBookRepository_GetBooks_Call) RunAndReturn(run func(ctx context.Context, categoryIDs []int, limit int, offset int) ([]domain.Book, error)) *MockBookRepository_GetBooks_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateBook provides a mock function for the type MockBookRepository
func (_mock *MockBookRepository) UpdateBook(ctx context.Context, book domain.Book) (domain.Book, error) {
	ret := _mock.Called(ctx, book)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBook")
	}

	var r0 domain.Book
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.Book) (domain.Book, error)); ok {
		return returnFunc(ctx, book)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.Book) domain.Book); ok {
		r0 = returnFunc(ctx, book)
	} else {
		r0 = ret.Get(0).(domain.Book)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.Book) error); ok {
		r1 = returnFunc(ctx, book)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockBookRepository_UpdateBook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateBook'
type MockBookRepository_UpdateBook_Call struct {
	*mock.Call
}

// UpdateBook is a helper method to define mock.On call
//   - ctx context.Context
//   - book domain.Book
func (_e *MockBookRepository_Expecter) UpdateBook(ctx interface{}, book interface{}) *MockBookRepository_UpdateBook_Call {
	return &MockBookRepository_UpdateBook_Call{Call: _e.mock.On("UpdateBook", ctx, book)}
}

func (_c *MockBookRepository_UpdateBook_Call) Run(run func(ctx context.Context, book domain.Book)) *MockBookRepository_UpdateBook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.Book
		if args[1] != nil {
			arg1 = args[1].(domain.Book)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockBookRepository_UpdateBook_Call) Return(book1 domain.Book, err error) *MockBookRepository_UpdateBook_Call {
	_c.Call.Return(book1, err)
	return _c
}

func (_c *MockBookRepository_UpdateBook_Call) RunAndReturn(run func(ctx context.Context, book domain.Book) (domain.Book, error)) *MockBookRepository_UpdateBook_Call {
	_c.Call.Return(run)
	return _c
}
