// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"toptal/internal/app/domain"

	mock "github.com/stretchr/testify/mock"
)

// NewMockUserRepository creates a new instance of MockUserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserRepository {
	mock := &MockUserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUserRepository is an autogenerated mock type for the UserRepository type
type MockUserRepository struct {
	mock.Mock
}

type MockUserRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserRepository) EXPECT() *MockUserRepository_Expecter {
	return &MockUserRepository_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) CreateUser(ctx context.Context, data domain.User) (domain.User, error) {
	ret := _mock.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 domain.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.User) (domain.User, error)); ok {
		return returnFunc(ctx, data)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.User) domain.User); ok {
		r0 = returnFunc(ctx, data)
	} else {
		r0 = ret.Get(0).(domain.User)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.User) error); ok {
		r1 = returnFunc(ctx, data)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserRepository_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockUserRepository_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - data domain.User
func (_e *MockUserRepository_Expecter) CreateUser(ctx interface{}, data interface{}) *MockUserRepository_CreateUser_Call {
	return &MockUserRepository_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, data)}
}

func (_c *MockUserRepository_CreateUser_Call) Run(run func(ctx context.Context, data domain.User)) *MockUserRepository_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.User
		if args[1] != nil {
			arg1 = args[1].(domain.User)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUserRepository_CreateUser_Call) Return(user domain.User, err error) *MockUserRepository_CreateUser_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUserRepository_CreateUser_Call) RunAndReturn(run func(ctx context.Context, data domain.User) (domain.User, error)) *MockUserRepository_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUser provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) GetUser(ctx context.Context, id int) (domain.User, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 domain.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) (domain.User, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) domain.User); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(domain.User)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserRepository_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type MockUserRepository_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
func (_e *MockUserRepository_Expecter) GetUser(ctx interface{}, id interface{}) *MockUserRepository_GetUser_Call {
	return &MockUserRepository_GetUser_Call{Call: _e.mock.On("GetUser", ctx, id)}
}

func (_c *MockUserRepository_GetUser_Call) Run(run func(ctx context.Context, id int)) *MockUserRepository_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUserRepository_GetUser_Call) Return(user domain.User, err error) *MockUserRepository_GetUser_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUserRepository_GetUser_Call) RunAndReturn(run func(ctx context.Context, id int) (domain.User, error)) *MockUserRepository_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByEmail provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) GetUserByEmail(ctx context.Context, email string) (domain.User, error) {
	ret := _mock.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByEmail")
	}

	var r0 domain.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (domain.User, error)); ok {
		return returnFunc(ctx, email)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) domain.User); ok {
		r0 = returnFunc(ctx, email)
	} else {
		r0 = ret.Get(0).(domain.User)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, email)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserRepository_GetUserByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByEmail'
type MockUserRepository_GetUserByEmail_Call struct {
	*mock.Call
}

// GetUserByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *MockUserRepository_Expecter) GetUserByEmail(ctx interface{}, email interface{}) *MockUserRepository_GetUserByEmail_Call {
	return &MockUserRepository_GetUserByEmail_Call{Call: _e.mock.On("GetUserByEmail", ctx, email)}
}

func (_c *MockUserRepository_GetUserByEmail_Call) Run(run func(ctx context.Context, email string)) *MockUserRepository_GetUserByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUserRepository_GetUserByEmail_Call) Return(user domain.User, err error) *MockUserRepository_GetUserByEmail_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUserRepository_GetUserByEmail_Call) RunAndReturn(run func(ctx context.Context, email string) (domain.User, error)) *MockUserRepository_GetUserByEmail_Call {
	_c.Call.Return(run)
	return _c
}
